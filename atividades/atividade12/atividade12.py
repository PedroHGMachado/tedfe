"""
Disciplina: Tratamento Estat√≠stico de Dados em F√≠sica Experimental
Atividade: 12
Author: pedro.machado
"""

import numpy as np


def generete_XDpoints(N=1, X=2):

    points = np.random.rand(X*N).reshape(N, X)
    return points


def count_inner_radius(points, r=1):

    n = np.sum(np.sum(points**2, axis=1) <= r)
    return n

"""
1) Um exemplo did√°tico do uso de simula√ß√µes Monte Carlo √© a estimativa estoc√°stica do valor de ùúã. A
ideia consiste gerar pontos uniformemente distribu√≠dos no quadrado [0, 1] √ó [0, 1] e calcular a
frequ√™ncia relativa com que os pontos gerados pertencem ao c√≠rculo de raio unit√°rio centrado na origem,
uma vez que a probabilidade, ùëù, de cada ponto gerado estar dentro do c√≠rculo √© igual √† raz√£o entre a √°rea
da se√ß√£o do c√≠rculo (ùê¥ùëÜ = ùúã/4) e a √°rea do quadrado onde os pontos s√£o gerados (ùê¥ùëÑ = 1): ùëù = ùê¥ùëÜ/ùê¥ùëÑ = ùúã/4.
Na pr√°tica, o que se faz √© gerar ùëÅ pares de valores, ùë¢1 e ùë¢2, com ùë¢1 e ùë¢2 distribu√≠dos uniforme entre 0 e 1,
e verificar o n√∫mero de casos, ùëõ, em que a condi√ß√£o ùë¢1^2 + ùë¢2^2 ‚â§ 1 √© satisfeita.
O valor de ùúã √© estimado por ùë• = 4ùëõ/ùëÅ.

Fa√ßa uma rotina para fazer uma simula√ß√£o com ùëµ = ùüè. ùüéùüéùüé pontos e responda os itens abaixo:
1.a) Qual √© o valor de ùëõ obtido na primeira simula√ß√£o.
1.b) Estime a incerteza no valor de ùëõ, ùúéÃÉùëõ ‚âÖ ‚àöùëÅùëù(1 ‚àí ùëù) usando a frequ√™ncia relativa obtida na
simula√ß√£o, ùëõ/ùëÅ, como valor aproximado para a probabilidade de sucesso (isto √©, considerando ùëù ‚âÖ ùëõ/N).
Note que essa aproxima√ß√£o seria a √∫nica op√ß√£o caso o valor de ùúã n√£o fosse conhecido.
Escreva essa incerteza com o n√∫mero correto de algarismos significativos.
1.c) Calcule o valor correspondente de ùë• = 4ùëõ/N e sua incerteza estimada, ùúéÃÉùë• = 4ùúéÃÉùëõ/ùëÅ
(use o ùúéÃÉùëõ estimado no item 1.b). Escreva o resultado com o n√∫mero correto de algarismos significativos.
"""


N1 = 1000
points1 = generete_XDpoints(N1, X=2)  # N pontos aleat√≥rios no quadrado de 1X1.

# 1.a)
n1 = count_inner_radius(points1)      # Pontos internos ao raio 1
print(f"Quest√£o 1.a) n = {n1}")


# 1.b)
p_bar1 = n1/N1
sigma_n1 = np.sqrt(N1*p_bar1*(1-p_bar1))
print(f"Quest√£o 1.b) sigma_n = {sigma_n1}")


# 1.c)
x = 4*p_bar1
sigma_x = 4*sigma_n1/N1
print(f"Quest√£o 1.c) x = {x} +- {sigma_x}")


"""
2) Considere agora o caso de uma vers√£o em tr√™s dimens√µes da simula√ß√£o: ou seja, s√£o gerados ùëÅ pontos
com coordenadas, ùë¢1, ùë¢2 e ùë¢3, distribu√≠das uniformemente entre 0 e 1, e se contabiliza o n√∫mero ùëõ de
vezes em que os pontos gerados pertencem √† esfera de raio unit√°rio centrada na origem (isto √©, quando
ùë¢1^2 + ùë¢2^2 + ùë¢3^2 ‚â§ 1). Note que a raz√£o entre os volumes √© ùëù = ùúã/6, de modo que neste caso o valor de ùúã √©
estimado por ùë¶ = 6ùëõ/ùëÅ.
Fa√ßa uma rotina para fazer uma simula√ß√£o com ùëµ = ùüìùüéùüé pontos e responda
(Aten√ß√£o: o N √© diferente do usado na quest√£o 1):
2.a) Qual √© o valor de ùëõ obtido na primeira simula√ß√£o efetuada.
2.b) Estime a incerteza no valor de ùëõ, ùúéÃÉùëõ ‚âÖ ‚àöùëÅùëùÃÉ(1 ‚àí ùëùÃÉ), considerando a aproxima√ß√£o ùëù ‚âÖ ùëõ/ùëÅ.
Escreva essa incerteza com o n√∫mero correto de algarismos significativos.
2.c) Calcule ùë¶ = 6ùëõ/ùëÅ e estime sua incerteza (use o ùúéÃÉùëõ estimando no item 2.b).
Escreva o resultado como n√∫mero correto de algarismos significativos.
"""

N2 = 500
points2 = generete_XDpoints(N2, X=3)

# 2.a)
n2 = count_inner_radius(points2)
print(f"Quest√£o 2.a) n = {n2}")

# 2.b)
p_bar2 = n2/N2
sigma_n2 = np.sqrt(N2*p_bar2*(1-p_bar2))
print(f"Quest√£o 2.b) sigma_n = {sigma_n2}")


# 2.c)
y = 6*p_bar2
sigma_y = 6*sigma_n2/N2
print(f"Quest√£o 2.c) y = {y} +- {sigma_y}")


"""
3) Usando seus conhecimentos sobre binomial e sobre os problemas em quest√£o, calcule os desviospadr√µes verdadeiros,
ùúéùëõ = ‚àöùëÅùëù(1 ‚àí ùëù) de ùëõ para os casos dos experimentos num√©ricos em duas e em tr√™s dimens√µes.
Escreva os desvios-padr√µes verdadeiros com dois algarismos significativos. Compare-os
com as incertezas de ùëõ estimadas nos itens 1.b e 2.b.
"""

p1_real = np.pi/4
sigma_n1_real = np.sqrt(N1*p1_real*(1 - p1_real))


p2_real = np.pi/6
sigma_n2_real = np.sqrt(N2*p2_real*(1 - p2_real))

print(f"Quest√£o 3)\n"
      f"sigma_n 1.b real = {sigma_n1_real}\n"
      f"sigma_n 2.b real = {sigma_n2_real}")

"""
4) Usando seus conhecimentos sobre binomial e sobre os problemas em quest√£o, estime a quantidade de
pontos necess√°rios no caso bidimensional para que a incerteza relativa na estimativa de ùúã seja de 0,1%
(ou seja, o valor de N para que ùúéùë• = 0,001 ‚àó ùë• ‚âà 0,003, pois ùë• ‚âà ùúã ‚âà 3).

5) Repita a estimativa feita no item 4 para o caso de tr√™s dimens√µes.
"""

# 4)

# Formula obtida para obter precis√£o de 0,1% de x atrav√©s de sigma_x
N4 = int(((4 - x)/x)*10**6)  # pontos
points4 = generete_XDpoints(N4, X=2)

n4 = count_inner_radius(points4)
p_bar4 = n4/N4
sigma_n4 = np.sqrt(N4*p_bar4*(1-p_bar4))

x4 = 4*p_bar4
sigma_x4 = 4*sigma_n4/N4

print(f"Quest√£o 4) \n"
      f"N = {N4}\n"
      f"x = {x4}\n"
      f"sigma_x = {sigma_x4}")

# 5)

N5 = int(((6-x)/x)*10**6)
points5 = generete_XDpoints(N5, X=3)

n5 = count_inner_radius(points5)

p_bar5 = n5/N5
sigma_n5 = np.sqrt(N5*p_bar5*(1-p_bar5))

y5 = 6*p_bar5
sigma_y5 = 6*sigma_n5/N5

print(f"Quest√£o 4) \n"
      f"N = {N5}\n"
      f"y = {y5}\n"
      f"sigma_y = {sigma_y5}")



